plugins {
    id 'io.qameta.allure' version '2.11.2'
    id 'java'
}

allure {
    version = "2.19.0"
    adapter {
        allureJavaVersion = "2.11.2"
        aspectjVersion = "1.9.19"
        environment.put("JAVA_HOME", "C:\\Program Files\\Java\\jdk-1.8")

        autoconfigureListeners.set(true)
        aspectjWeaver.set(true)


        frameworks{
            testng {
                adapterVersion.set("...")
                enabled.set(true)
                // Enables allure-junit4 default test listeners via META-INF/services/...
                autoconfigureListeners.set(true)
            }
        }
    }
}


tasks.register('testGroup', Test) {
    useTestNG {
        suites 'src/test/resources/testng-groups.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

tasks.register('testContact', Test) {
    useTestNG {
        suites 'src/test/resources/testng-contacts.xml'
    }
    if (project.hasProperty('browser')) {
    systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

tasks.register('testGroupBdd', Test) {
    useTestNG {
        suites 'src/test/resources/testng-groups-bdd.xml'
    }
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

test {
    useTestNG();
    if (project.hasProperty('browser')) {
        systemProperty 'browser', "${browser}"
    }
    if (project.hasProperty('target')) {
        systemProperty 'target', "${target}"
    }
    if (project.hasProperty('verifyUI')) {
        systemProperty 'verifyUI', "${verifyUI}"
    }
    if (project.hasProperty('platform')) {
        systemProperty 'platform', "${platform}"
    }
}

repositories {
    mavenCentral()
    google()
    maven {
        url "https://mvnrepository.com/artifact/org.testng/testng"
    }
}

dependencies {
    testImplementation group: 'org.testng', name: 'testng', version: '6.14.3' // не обновлять. Последняя версия для J8

    implementation 'io.cucumber:cucumber-java:6.11.0'
    implementation 'io.cucumber:cucumber-testng:6.11.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.10.0'
    implementation group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
    implementation group: 'com.beust', name: 'jcommander', version: '1.82'
    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.20'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.5' // не обновлять. Последняя версия для J8
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.33'
    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.6.15.Final' // не обновлять. Последняя версия для J8
    implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.23.0'

    runtimeOnly 'org.aspectj:aspectjweaver:1.9.19'

}
